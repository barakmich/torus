// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: torus.proto

package models

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type INode struct {
	Volume   uint64            `protobuf:"varint,1,opt,name=volume,proto3" json:"volume,omitempty"`
	INode    uint64            `protobuf:"varint,2,opt,name=inode,proto3" json:"inode,omitempty"`
	Filesize uint64            `protobuf:"varint,4,opt,name=filesize,proto3" json:"filesize,omitempty"`
	Attrs    map[string]string `protobuf:"bytes,7,rep,name=attrs,proto3" json:"attrs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Blocks   []*BlockLayer     `protobuf:"bytes,8,rep,name=blocks,proto3" json:"blocks,omitempty"`
}

func (m *INode) Reset()         { *m = INode{} }
func (m *INode) String() string { return proto.CompactTextString(m) }
func (*INode) ProtoMessage()    {}
func (*INode) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ca8f42be2867226, []int{0}
}
func (m *INode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *INode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_INode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *INode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_INode.Merge(m, src)
}
func (m *INode) XXX_Size() int {
	return m.Size()
}
func (m *INode) XXX_DiscardUnknown() {
	xxx_messageInfo_INode.DiscardUnknown(m)
}

var xxx_messageInfo_INode proto.InternalMessageInfo

func (m *INode) GetVolume() uint64 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func (m *INode) GetINode() uint64 {
	if m != nil {
		return m.INode
	}
	return 0
}

func (m *INode) GetFilesize() uint64 {
	if m != nil {
		return m.Filesize
	}
	return 0
}

func (m *INode) GetAttrs() map[string]string {
	if m != nil {
		return m.Attrs
	}
	return nil
}

func (m *INode) GetBlocks() []*BlockLayer {
	if m != nil {
		return m.Blocks
	}
	return nil
}

type BlockLayer struct {
	Type    uint32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Content []byte `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *BlockLayer) Reset()         { *m = BlockLayer{} }
func (m *BlockLayer) String() string { return proto.CompactTextString(m) }
func (*BlockLayer) ProtoMessage()    {}
func (*BlockLayer) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ca8f42be2867226, []int{1}
}
func (m *BlockLayer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockLayer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockLayer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockLayer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockLayer.Merge(m, src)
}
func (m *BlockLayer) XXX_Size() int {
	return m.Size()
}
func (m *BlockLayer) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockLayer.DiscardUnknown(m)
}

var xxx_messageInfo_BlockLayer proto.InternalMessageInfo

func (m *BlockLayer) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *BlockLayer) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type Volume struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id   uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// TODO(barakmich): Respect sizes for FILE volumes.
	MaxBytes uint64 `protobuf:"varint,4,opt,name=max_bytes,json=maxBytes,proto3" json:"max_bytes,omitempty"`
}

func (m *Volume) Reset()         { *m = Volume{} }
func (m *Volume) String() string { return proto.CompactTextString(m) }
func (*Volume) ProtoMessage()    {}
func (*Volume) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ca8f42be2867226, []int{2}
}
func (m *Volume) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Volume) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Volume.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Volume) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Volume.Merge(m, src)
}
func (m *Volume) XXX_Size() int {
	return m.Size()
}
func (m *Volume) XXX_DiscardUnknown() {
	xxx_messageInfo_Volume.DiscardUnknown(m)
}

var xxx_messageInfo_Volume proto.InternalMessageInfo

func (m *Volume) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Volume) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Volume) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Volume) GetMaxBytes() uint64 {
	if m != nil {
		return m.MaxBytes
	}
	return 0
}

type PeerInfo struct {
	UUID          string         `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Address       string         `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	LastSeen      int64          `protobuf:"varint,3,opt,name=last_seen,json=lastSeen,proto3" json:"last_seen,omitempty"`
	TotalBlocks   uint64         `protobuf:"varint,4,opt,name=total_blocks,json=totalBlocks,proto3" json:"total_blocks,omitempty"`
	UsedBlocks    uint64         `protobuf:"varint,5,opt,name=used_blocks,json=usedBlocks,proto3" json:"used_blocks,omitempty"`
	TimedOut      bool           `protobuf:"varint,6,opt,name=timed_out,json=timedOut,proto3" json:"timed_out,omitempty"`
	RebalanceInfo *RebalanceInfo `protobuf:"bytes,7,opt,name=rebalance_info,json=rebalanceInfo,proto3" json:"rebalance_info,omitempty"`
	// ProtocolVersion is set by each peer to know if we're out of date or if a
	// protocol migration has occured.
	ProtocolVersion uint64 `protobuf:"varint,8,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"`
}

func (m *PeerInfo) Reset()         { *m = PeerInfo{} }
func (m *PeerInfo) String() string { return proto.CompactTextString(m) }
func (*PeerInfo) ProtoMessage()    {}
func (*PeerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ca8f42be2867226, []int{3}
}
func (m *PeerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PeerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PeerInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PeerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerInfo.Merge(m, src)
}
func (m *PeerInfo) XXX_Size() int {
	return m.Size()
}
func (m *PeerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PeerInfo proto.InternalMessageInfo

func (m *PeerInfo) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *PeerInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *PeerInfo) GetLastSeen() int64 {
	if m != nil {
		return m.LastSeen
	}
	return 0
}

func (m *PeerInfo) GetTotalBlocks() uint64 {
	if m != nil {
		return m.TotalBlocks
	}
	return 0
}

func (m *PeerInfo) GetUsedBlocks() uint64 {
	if m != nil {
		return m.UsedBlocks
	}
	return 0
}

func (m *PeerInfo) GetTimedOut() bool {
	if m != nil {
		return m.TimedOut
	}
	return false
}

func (m *PeerInfo) GetRebalanceInfo() *RebalanceInfo {
	if m != nil {
		return m.RebalanceInfo
	}
	return nil
}

func (m *PeerInfo) GetProtocolVersion() uint64 {
	if m != nil {
		return m.ProtocolVersion
	}
	return 0
}

type RebalanceInfo struct {
	LastRebalanceFinish int64  `protobuf:"varint,1,opt,name=last_rebalance_finish,json=lastRebalanceFinish,proto3" json:"last_rebalance_finish,omitempty"`
	LastRebalanceBlocks uint64 `protobuf:"varint,2,opt,name=last_rebalance_blocks,json=lastRebalanceBlocks,proto3" json:"last_rebalance_blocks,omitempty"`
	Rebalancing         bool   `protobuf:"varint,3,opt,name=rebalancing,proto3" json:"rebalancing,omitempty"`
}

func (m *RebalanceInfo) Reset()         { *m = RebalanceInfo{} }
func (m *RebalanceInfo) String() string { return proto.CompactTextString(m) }
func (*RebalanceInfo) ProtoMessage()    {}
func (*RebalanceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ca8f42be2867226, []int{4}
}
func (m *RebalanceInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RebalanceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RebalanceInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RebalanceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RebalanceInfo.Merge(m, src)
}
func (m *RebalanceInfo) XXX_Size() int {
	return m.Size()
}
func (m *RebalanceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RebalanceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RebalanceInfo proto.InternalMessageInfo

func (m *RebalanceInfo) GetLastRebalanceFinish() int64 {
	if m != nil {
		return m.LastRebalanceFinish
	}
	return 0
}

func (m *RebalanceInfo) GetLastRebalanceBlocks() uint64 {
	if m != nil {
		return m.LastRebalanceBlocks
	}
	return 0
}

func (m *RebalanceInfo) GetRebalancing() bool {
	if m != nil {
		return m.Rebalancing
	}
	return false
}

type Ring struct {
	Type              uint32            `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Version           uint32            `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	ReplicationFactor uint32            `protobuf:"varint,3,opt,name=replication_factor,json=replicationFactor,proto3" json:"replication_factor,omitempty"`
	Peers             []*PeerInfo       `protobuf:"bytes,4,rep,name=peers,proto3" json:"peers,omitempty"`
	Attrs             map[string][]byte `protobuf:"bytes,5,rep,name=attrs,proto3" json:"attrs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Ring) Reset()         { *m = Ring{} }
func (m *Ring) String() string { return proto.CompactTextString(m) }
func (*Ring) ProtoMessage()    {}
func (*Ring) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ca8f42be2867226, []int{5}
}
func (m *Ring) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ring) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ring.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ring) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ring.Merge(m, src)
}
func (m *Ring) XXX_Size() int {
	return m.Size()
}
func (m *Ring) XXX_DiscardUnknown() {
	xxx_messageInfo_Ring.DiscardUnknown(m)
}

var xxx_messageInfo_Ring proto.InternalMessageInfo

func (m *Ring) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Ring) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Ring) GetReplicationFactor() uint32 {
	if m != nil {
		return m.ReplicationFactor
	}
	return 0
}

func (m *Ring) GetPeers() []*PeerInfo {
	if m != nil {
		return m.Peers
	}
	return nil
}

func (m *Ring) GetAttrs() map[string][]byte {
	if m != nil {
		return m.Attrs
	}
	return nil
}

type BlockRef struct {
	Volume uint64 `protobuf:"varint,1,opt,name=volume,proto3" json:"volume,omitempty"`
	INode  uint64 `protobuf:"varint,2,opt,name=inode,proto3" json:"inode,omitempty"`
	Block  uint64 `protobuf:"varint,3,opt,name=block,proto3" json:"block,omitempty"`
}

func (m *BlockRef) Reset()         { *m = BlockRef{} }
func (m *BlockRef) String() string { return proto.CompactTextString(m) }
func (*BlockRef) ProtoMessage()    {}
func (*BlockRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ca8f42be2867226, []int{6}
}
func (m *BlockRef) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockRef.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockRef.Merge(m, src)
}
func (m *BlockRef) XXX_Size() int {
	return m.Size()
}
func (m *BlockRef) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockRef.DiscardUnknown(m)
}

var xxx_messageInfo_BlockRef proto.InternalMessageInfo

func (m *BlockRef) GetVolume() uint64 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func (m *BlockRef) GetINode() uint64 {
	if m != nil {
		return m.INode
	}
	return 0
}

func (m *BlockRef) GetBlock() uint64 {
	if m != nil {
		return m.Block
	}
	return 0
}

type INodeRef struct {
	Volume uint64 `protobuf:"varint,1,opt,name=volume,proto3" json:"volume,omitempty"`
	INode  uint64 `protobuf:"varint,2,opt,name=inode,proto3" json:"inode,omitempty"`
}

func (m *INodeRef) Reset()         { *m = INodeRef{} }
func (m *INodeRef) String() string { return proto.CompactTextString(m) }
func (*INodeRef) ProtoMessage()    {}
func (*INodeRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ca8f42be2867226, []int{7}
}
func (m *INodeRef) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *INodeRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_INodeRef.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *INodeRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_INodeRef.Merge(m, src)
}
func (m *INodeRef) XXX_Size() int {
	return m.Size()
}
func (m *INodeRef) XXX_DiscardUnknown() {
	xxx_messageInfo_INodeRef.DiscardUnknown(m)
}

var xxx_messageInfo_INodeRef proto.InternalMessageInfo

func (m *INodeRef) GetVolume() uint64 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func (m *INodeRef) GetINode() uint64 {
	if m != nil {
		return m.INode
	}
	return 0
}

func init() {
	proto.RegisterType((*INode)(nil), "models.INode")
	proto.RegisterMapType((map[string]string)(nil), "models.INode.AttrsEntry")
	proto.RegisterType((*BlockLayer)(nil), "models.BlockLayer")
	proto.RegisterType((*Volume)(nil), "models.Volume")
	proto.RegisterType((*PeerInfo)(nil), "models.PeerInfo")
	proto.RegisterType((*RebalanceInfo)(nil), "models.RebalanceInfo")
	proto.RegisterType((*Ring)(nil), "models.Ring")
	proto.RegisterMapType((map[string][]byte)(nil), "models.Ring.AttrsEntry")
	proto.RegisterType((*BlockRef)(nil), "models.BlockRef")
	proto.RegisterType((*INodeRef)(nil), "models.INodeRef")
}

func init() { proto.RegisterFile("torus.proto", fileDescriptor_0ca8f42be2867226) }

var fileDescriptor_0ca8f42be2867226 = []byte{
	// 714 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0x4f, 0x6f, 0xd3, 0x48,
	0x14, 0xef, 0x24, 0x76, 0xea, 0xbc, 0x34, 0xdd, 0xee, 0x6c, 0xbb, 0x6b, 0xb5, 0x2b, 0x27, 0x9b,
	0xc3, 0x2a, 0xbb, 0xa2, 0xa9, 0x54, 0x2e, 0x55, 0xc5, 0x85, 0x00, 0x95, 0x2a, 0x21, 0x40, 0x83,
	0x5a, 0x89, 0x03, 0x8a, 0x9c, 0x78, 0x92, 0x8e, 0xea, 0xcc, 0x44, 0xf6, 0xb8, 0x6a, 0xf8, 0x14,
	0x5c, 0xf9, 0x06, 0xf0, 0x0d, 0x38, 0x72, 0xe4, 0xd8, 0x23, 0xa7, 0xaa, 0x75, 0xbf, 0x01, 0xe2,
	0xc0, 0x11, 0xf9, 0x8d, 0x9d, 0xa6, 0x02, 0x0e, 0xc0, 0x6d, 0x7e, 0xbf, 0xf7, 0x67, 0xde, 0xfb,
	0xbd, 0x79, 0x03, 0x35, 0xad, 0xa2, 0x24, 0xee, 0x4c, 0x22, 0xa5, 0x15, 0xad, 0x8c, 0x55, 0xc0,
	0xc3, 0x78, 0x7d, 0x73, 0x24, 0xf4, 0x51, 0xd2, 0xef, 0x0c, 0xd4, 0x78, 0x6b, 0xa4, 0x46, 0x6a,
	0x0b, 0xcd, 0xfd, 0x64, 0x88, 0x08, 0x01, 0x9e, 0x4c, 0x58, 0xeb, 0x23, 0x01, 0x7b, 0xff, 0x91,
	0x0a, 0x38, 0xfd, 0x13, 0x2a, 0x27, 0x2a, 0x4c, 0xc6, 0xdc, 0x25, 0x4d, 0xd2, 0xb6, 0x58, 0x8e,
	0x68, 0x03, 0x6c, 0x21, 0x55, 0xc0, 0xdd, 0x52, 0x46, 0x77, 0xab, 0xe9, 0x79, 0xc3, 0x44, 0x30,
	0xc3, 0xd3, 0x75, 0x70, 0x86, 0x22, 0xe4, 0xb1, 0x78, 0xc1, 0x5d, 0x0b, 0x43, 0x67, 0x98, 0x76,
	0xc0, 0xf6, 0xb5, 0x8e, 0x62, 0x77, 0xb1, 0x59, 0x6e, 0xd7, 0xb6, 0xdd, 0x8e, 0xa9, 0xb2, 0x83,
	0x09, 0x3a, 0x77, 0x33, 0xd3, 0x03, 0xa9, 0xa3, 0x29, 0x33, 0x6e, 0xf4, 0x7f, 0xa8, 0xf4, 0x43,
	0x35, 0x38, 0x8e, 0x5d, 0x07, 0x03, 0x68, 0x11, 0xd0, 0xcd, 0xd8, 0x87, 0xfe, 0x94, 0x47, 0x2c,
	0xf7, 0x58, 0xdf, 0x01, 0xb8, 0x4e, 0x40, 0x57, 0xa0, 0x7c, 0xcc, 0xa7, 0x58, 0x7b, 0x95, 0x65,
	0x47, 0xba, 0x0a, 0xf6, 0x89, 0x1f, 0x26, 0xa6, 0xf0, 0x2a, 0x33, 0x60, 0xb7, 0xb4, 0x43, 0x5a,
	0xbb, 0x00, 0xd7, 0xf9, 0x28, 0x05, 0x4b, 0x4f, 0x27, 0xa6, 0xed, 0x3a, 0xc3, 0x33, 0x75, 0x61,
	0x71, 0xa0, 0xa4, 0xe6, 0x52, 0x63, 0xf4, 0x12, 0x2b, 0x60, 0xeb, 0x39, 0x54, 0x0e, 0x8d, 0x30,
	0x14, 0x2c, 0xe9, 0xe7, 0x72, 0x55, 0x19, 0x9e, 0xe9, 0x32, 0x94, 0x44, 0x60, 0x94, 0x62, 0x25,
	0x11, 0xcc, 0x72, 0x97, 0x8d, 0x0f, 0xe6, 0xde, 0x80, 0xea, 0xd8, 0x3f, 0xed, 0xf5, 0xa7, 0x9a,
	0xc7, 0x85, 0x60, 0x63, 0xff, 0xb4, 0x9b, 0xe1, 0xd6, 0x9b, 0x12, 0x38, 0x4f, 0x38, 0x8f, 0xf6,
	0xe5, 0x50, 0xd1, 0xbf, 0xc1, 0x4a, 0x12, 0x11, 0x98, 0x1b, 0xba, 0x4e, 0x7a, 0xde, 0xb0, 0x0e,
	0x0e, 0xf6, 0xef, 0x33, 0x64, 0xb3, 0x1a, 0xfd, 0x20, 0x88, 0x78, 0x1c, 0xe7, 0x1d, 0x16, 0x30,
	0xbb, 0x21, 0xf4, 0x63, 0xdd, 0x8b, 0x39, 0x97, 0x78, 0x75, 0x99, 0x39, 0x19, 0xf1, 0x94, 0x73,
	0x49, 0xff, 0x81, 0x25, 0xad, 0xb4, 0x1f, 0xf6, 0x72, 0xa1, 0x4d, 0x05, 0x35, 0xe4, 0x50, 0x95,
	0x98, 0x36, 0xa0, 0x96, 0xc4, 0x3c, 0x28, 0x3c, 0x6c, 0xf4, 0x80, 0x8c, 0xca, 0x1d, 0x36, 0xa0,
	0xaa, 0xc5, 0x98, 0x07, 0x3d, 0x95, 0x68, 0xb7, 0xd2, 0x24, 0x6d, 0x87, 0x39, 0x48, 0x3c, 0x4e,
	0x34, 0xbd, 0x03, 0xcb, 0x11, 0xef, 0xfb, 0xa1, 0x2f, 0x07, 0xbc, 0x27, 0xe4, 0x50, 0xb9, 0x8b,
	0x4d, 0xd2, 0xae, 0x6d, 0xaf, 0x15, 0xb3, 0x64, 0x85, 0x35, 0x6b, 0x92, 0xd5, 0xa3, 0x79, 0x48,
	0xff, 0x83, 0x15, 0x7c, 0x99, 0x03, 0x15, 0xf6, 0x4e, 0x78, 0x14, 0x0b, 0x25, 0x5d, 0x07, 0x0b,
	0xf8, 0xad, 0xe0, 0x0f, 0x0d, 0xdd, 0x7a, 0x45, 0xa0, 0x7e, 0x23, 0x17, 0xdd, 0x86, 0x35, 0x6c,
	0xfc, 0xfa, 0xfe, 0xa1, 0x90, 0x22, 0x3e, 0x42, 0x05, 0xcb, 0xec, 0x8f, 0xcc, 0x38, 0x8b, 0xd8,
	0x43, 0xd3, 0x37, 0x62, 0xf2, 0xb6, 0xcd, 0x14, 0x6f, 0xc6, 0xe4, 0xfd, 0x37, 0xa1, 0x56, 0xb8,
	0x0b, 0x39, 0x42, 0x89, 0x1d, 0x36, 0x4f, 0xb5, 0x3e, 0x11, 0xb0, 0x98, 0x90, 0xa3, 0xef, 0xbd,
	0xae, 0xa2, 0xb5, 0x12, 0xd2, 0x05, 0xa4, 0x9b, 0x40, 0x23, 0x3e, 0x09, 0xc5, 0xc0, 0xd7, 0x42,
	0xc9, 0xde, 0xd0, 0x1f, 0x68, 0x15, 0x61, 0xfe, 0x3a, 0xfb, 0x7d, 0xce, 0xb2, 0x87, 0x06, 0xfa,
	0x2f, 0xd8, 0x13, 0xce, 0xa3, 0x6c, 0x88, 0xd9, 0xb6, 0xac, 0x14, 0x0a, 0x17, 0x2f, 0x88, 0x19,
	0x33, 0xdd, 0x2c, 0xd6, 0xd0, 0x46, 0xbf, 0xbf, 0x66, 0x93, 0x10, 0x72, 0xf4, 0xf5, 0x16, 0xfe,
	0xd8, 0x66, 0x2d, 0xcd, 0x6f, 0xd6, 0x33, 0x70, 0x50, 0x22, 0xc6, 0x87, 0x3f, 0xff, 0xa1, 0xac,
	0x82, 0x8d, 0x23, 0xc0, 0xbe, 0x2d, 0x66, 0x40, 0xeb, 0x1e, 0x38, 0xc6, 0xeb, 0x17, 0x52, 0x77,
	0x6f, 0x5d, 0x5c, 0x7a, 0xe4, 0xf3, 0xa5, 0x47, 0x5e, 0xa7, 0x1e, 0x79, 0x9b, 0x7a, 0xe4, 0x5d,
	0xea, 0x91, 0xf7, 0xa9, 0x47, 0xce, 0x52, 0x8f, 0x5c, 0xa4, 0x1e, 0x79, 0x79, 0xe5, 0x2d, 0x9c,
	0x5d, 0x79, 0x0b, 0x1f, 0xae, 0xbc, 0x85, 0x7e, 0x05, 0x5f, 0xdc, 0xed, 0x2f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x2d, 0xb4, 0x0e, 0xef, 0x69, 0x05, 0x00, 0x00,
}

func (this *INode) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*INode)
	if !ok {
		that2, ok := that.(INode)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *INode")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *INode but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *INode but is not nil && this == nil")
	}
	if this.Volume != that1.Volume {
		return fmt.Errorf("Volume this(%v) Not Equal that(%v)", this.Volume, that1.Volume)
	}
	if this.INode != that1.INode {
		return fmt.Errorf("INode this(%v) Not Equal that(%v)", this.INode, that1.INode)
	}
	if this.Filesize != that1.Filesize {
		return fmt.Errorf("Filesize this(%v) Not Equal that(%v)", this.Filesize, that1.Filesize)
	}
	if len(this.Attrs) != len(that1.Attrs) {
		return fmt.Errorf("Attrs this(%v) Not Equal that(%v)", len(this.Attrs), len(that1.Attrs))
	}
	for i := range this.Attrs {
		if this.Attrs[i] != that1.Attrs[i] {
			return fmt.Errorf("Attrs this[%v](%v) Not Equal that[%v](%v)", i, this.Attrs[i], i, that1.Attrs[i])
		}
	}
	if len(this.Blocks) != len(that1.Blocks) {
		return fmt.Errorf("Blocks this(%v) Not Equal that(%v)", len(this.Blocks), len(that1.Blocks))
	}
	for i := range this.Blocks {
		if !this.Blocks[i].Equal(that1.Blocks[i]) {
			return fmt.Errorf("Blocks this[%v](%v) Not Equal that[%v](%v)", i, this.Blocks[i], i, that1.Blocks[i])
		}
	}
	return nil
}
func (this *INode) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*INode)
	if !ok {
		that2, ok := that.(INode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Volume != that1.Volume {
		return false
	}
	if this.INode != that1.INode {
		return false
	}
	if this.Filesize != that1.Filesize {
		return false
	}
	if len(this.Attrs) != len(that1.Attrs) {
		return false
	}
	for i := range this.Attrs {
		if this.Attrs[i] != that1.Attrs[i] {
			return false
		}
	}
	if len(this.Blocks) != len(that1.Blocks) {
		return false
	}
	for i := range this.Blocks {
		if !this.Blocks[i].Equal(that1.Blocks[i]) {
			return false
		}
	}
	return true
}
func (this *BlockLayer) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*BlockLayer)
	if !ok {
		that2, ok := that.(BlockLayer)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *BlockLayer")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *BlockLayer but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *BlockLayer but is not nil && this == nil")
	}
	if this.Type != that1.Type {
		return fmt.Errorf("Type this(%v) Not Equal that(%v)", this.Type, that1.Type)
	}
	if !bytes.Equal(this.Content, that1.Content) {
		return fmt.Errorf("Content this(%v) Not Equal that(%v)", this.Content, that1.Content)
	}
	return nil
}
func (this *BlockLayer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BlockLayer)
	if !ok {
		that2, ok := that.(BlockLayer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !bytes.Equal(this.Content, that1.Content) {
		return false
	}
	return true
}
func (this *Volume) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Volume)
	if !ok {
		that2, ok := that.(Volume)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Volume")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Volume but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Volume but is not nil && this == nil")
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if this.Id != that1.Id {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if this.Type != that1.Type {
		return fmt.Errorf("Type this(%v) Not Equal that(%v)", this.Type, that1.Type)
	}
	if this.MaxBytes != that1.MaxBytes {
		return fmt.Errorf("MaxBytes this(%v) Not Equal that(%v)", this.MaxBytes, that1.MaxBytes)
	}
	return nil
}
func (this *Volume) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Volume)
	if !ok {
		that2, ok := that.(Volume)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.MaxBytes != that1.MaxBytes {
		return false
	}
	return true
}
func (this *PeerInfo) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*PeerInfo)
	if !ok {
		that2, ok := that.(PeerInfo)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *PeerInfo")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *PeerInfo but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *PeerInfo but is not nil && this == nil")
	}
	if this.UUID != that1.UUID {
		return fmt.Errorf("UUID this(%v) Not Equal that(%v)", this.UUID, that1.UUID)
	}
	if this.Address != that1.Address {
		return fmt.Errorf("Address this(%v) Not Equal that(%v)", this.Address, that1.Address)
	}
	if this.LastSeen != that1.LastSeen {
		return fmt.Errorf("LastSeen this(%v) Not Equal that(%v)", this.LastSeen, that1.LastSeen)
	}
	if this.TotalBlocks != that1.TotalBlocks {
		return fmt.Errorf("TotalBlocks this(%v) Not Equal that(%v)", this.TotalBlocks, that1.TotalBlocks)
	}
	if this.UsedBlocks != that1.UsedBlocks {
		return fmt.Errorf("UsedBlocks this(%v) Not Equal that(%v)", this.UsedBlocks, that1.UsedBlocks)
	}
	if this.TimedOut != that1.TimedOut {
		return fmt.Errorf("TimedOut this(%v) Not Equal that(%v)", this.TimedOut, that1.TimedOut)
	}
	if !this.RebalanceInfo.Equal(that1.RebalanceInfo) {
		return fmt.Errorf("RebalanceInfo this(%v) Not Equal that(%v)", this.RebalanceInfo, that1.RebalanceInfo)
	}
	if this.ProtocolVersion != that1.ProtocolVersion {
		return fmt.Errorf("ProtocolVersion this(%v) Not Equal that(%v)", this.ProtocolVersion, that1.ProtocolVersion)
	}
	return nil
}
func (this *PeerInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PeerInfo)
	if !ok {
		that2, ok := that.(PeerInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UUID != that1.UUID {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if this.LastSeen != that1.LastSeen {
		return false
	}
	if this.TotalBlocks != that1.TotalBlocks {
		return false
	}
	if this.UsedBlocks != that1.UsedBlocks {
		return false
	}
	if this.TimedOut != that1.TimedOut {
		return false
	}
	if !this.RebalanceInfo.Equal(that1.RebalanceInfo) {
		return false
	}
	if this.ProtocolVersion != that1.ProtocolVersion {
		return false
	}
	return true
}
func (this *RebalanceInfo) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RebalanceInfo)
	if !ok {
		that2, ok := that.(RebalanceInfo)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RebalanceInfo")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RebalanceInfo but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RebalanceInfo but is not nil && this == nil")
	}
	if this.LastRebalanceFinish != that1.LastRebalanceFinish {
		return fmt.Errorf("LastRebalanceFinish this(%v) Not Equal that(%v)", this.LastRebalanceFinish, that1.LastRebalanceFinish)
	}
	if this.LastRebalanceBlocks != that1.LastRebalanceBlocks {
		return fmt.Errorf("LastRebalanceBlocks this(%v) Not Equal that(%v)", this.LastRebalanceBlocks, that1.LastRebalanceBlocks)
	}
	if this.Rebalancing != that1.Rebalancing {
		return fmt.Errorf("Rebalancing this(%v) Not Equal that(%v)", this.Rebalancing, that1.Rebalancing)
	}
	return nil
}
func (this *RebalanceInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RebalanceInfo)
	if !ok {
		that2, ok := that.(RebalanceInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LastRebalanceFinish != that1.LastRebalanceFinish {
		return false
	}
	if this.LastRebalanceBlocks != that1.LastRebalanceBlocks {
		return false
	}
	if this.Rebalancing != that1.Rebalancing {
		return false
	}
	return true
}
func (this *Ring) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Ring)
	if !ok {
		that2, ok := that.(Ring)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Ring")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Ring but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Ring but is not nil && this == nil")
	}
	if this.Type != that1.Type {
		return fmt.Errorf("Type this(%v) Not Equal that(%v)", this.Type, that1.Type)
	}
	if this.Version != that1.Version {
		return fmt.Errorf("Version this(%v) Not Equal that(%v)", this.Version, that1.Version)
	}
	if this.ReplicationFactor != that1.ReplicationFactor {
		return fmt.Errorf("ReplicationFactor this(%v) Not Equal that(%v)", this.ReplicationFactor, that1.ReplicationFactor)
	}
	if len(this.Peers) != len(that1.Peers) {
		return fmt.Errorf("Peers this(%v) Not Equal that(%v)", len(this.Peers), len(that1.Peers))
	}
	for i := range this.Peers {
		if !this.Peers[i].Equal(that1.Peers[i]) {
			return fmt.Errorf("Peers this[%v](%v) Not Equal that[%v](%v)", i, this.Peers[i], i, that1.Peers[i])
		}
	}
	if len(this.Attrs) != len(that1.Attrs) {
		return fmt.Errorf("Attrs this(%v) Not Equal that(%v)", len(this.Attrs), len(that1.Attrs))
	}
	for i := range this.Attrs {
		if !bytes.Equal(this.Attrs[i], that1.Attrs[i]) {
			return fmt.Errorf("Attrs this[%v](%v) Not Equal that[%v](%v)", i, this.Attrs[i], i, that1.Attrs[i])
		}
	}
	return nil
}
func (this *Ring) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Ring)
	if !ok {
		that2, ok := that.(Ring)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.ReplicationFactor != that1.ReplicationFactor {
		return false
	}
	if len(this.Peers) != len(that1.Peers) {
		return false
	}
	for i := range this.Peers {
		if !this.Peers[i].Equal(that1.Peers[i]) {
			return false
		}
	}
	if len(this.Attrs) != len(that1.Attrs) {
		return false
	}
	for i := range this.Attrs {
		if !bytes.Equal(this.Attrs[i], that1.Attrs[i]) {
			return false
		}
	}
	return true
}
func (this *BlockRef) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*BlockRef)
	if !ok {
		that2, ok := that.(BlockRef)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *BlockRef")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *BlockRef but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *BlockRef but is not nil && this == nil")
	}
	if this.Volume != that1.Volume {
		return fmt.Errorf("Volume this(%v) Not Equal that(%v)", this.Volume, that1.Volume)
	}
	if this.INode != that1.INode {
		return fmt.Errorf("INode this(%v) Not Equal that(%v)", this.INode, that1.INode)
	}
	if this.Block != that1.Block {
		return fmt.Errorf("Block this(%v) Not Equal that(%v)", this.Block, that1.Block)
	}
	return nil
}
func (this *BlockRef) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BlockRef)
	if !ok {
		that2, ok := that.(BlockRef)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Volume != that1.Volume {
		return false
	}
	if this.INode != that1.INode {
		return false
	}
	if this.Block != that1.Block {
		return false
	}
	return true
}
func (this *INodeRef) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*INodeRef)
	if !ok {
		that2, ok := that.(INodeRef)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *INodeRef")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *INodeRef but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *INodeRef but is not nil && this == nil")
	}
	if this.Volume != that1.Volume {
		return fmt.Errorf("Volume this(%v) Not Equal that(%v)", this.Volume, that1.Volume)
	}
	if this.INode != that1.INode {
		return fmt.Errorf("INode this(%v) Not Equal that(%v)", this.INode, that1.INode)
	}
	return nil
}
func (this *INodeRef) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*INodeRef)
	if !ok {
		that2, ok := that.(INodeRef)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Volume != that1.Volume {
		return false
	}
	if this.INode != that1.INode {
		return false
	}
	return true
}
func (m *INode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *INode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *INode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Blocks) > 0 {
		for iNdEx := len(m.Blocks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Blocks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTorus(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Attrs) > 0 {
		for k := range m.Attrs {
			v := m.Attrs[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTorus(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintTorus(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTorus(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Filesize != 0 {
		i = encodeVarintTorus(dAtA, i, uint64(m.Filesize))
		i--
		dAtA[i] = 0x20
	}
	if m.INode != 0 {
		i = encodeVarintTorus(dAtA, i, uint64(m.INode))
		i--
		dAtA[i] = 0x10
	}
	if m.Volume != 0 {
		i = encodeVarintTorus(dAtA, i, uint64(m.Volume))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BlockLayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockLayer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockLayer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintTorus(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintTorus(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Volume) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Volume) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Volume) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxBytes != 0 {
		i = encodeVarintTorus(dAtA, i, uint64(m.MaxBytes))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintTorus(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintTorus(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTorus(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PeerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeerInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeerInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProtocolVersion != 0 {
		i = encodeVarintTorus(dAtA, i, uint64(m.ProtocolVersion))
		i--
		dAtA[i] = 0x40
	}
	if m.RebalanceInfo != nil {
		{
			size, err := m.RebalanceInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTorus(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.TimedOut {
		i--
		if m.TimedOut {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.UsedBlocks != 0 {
		i = encodeVarintTorus(dAtA, i, uint64(m.UsedBlocks))
		i--
		dAtA[i] = 0x28
	}
	if m.TotalBlocks != 0 {
		i = encodeVarintTorus(dAtA, i, uint64(m.TotalBlocks))
		i--
		dAtA[i] = 0x20
	}
	if m.LastSeen != 0 {
		i = encodeVarintTorus(dAtA, i, uint64(m.LastSeen))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTorus(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UUID) > 0 {
		i -= len(m.UUID)
		copy(dAtA[i:], m.UUID)
		i = encodeVarintTorus(dAtA, i, uint64(len(m.UUID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RebalanceInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RebalanceInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RebalanceInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Rebalancing {
		i--
		if m.Rebalancing {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.LastRebalanceBlocks != 0 {
		i = encodeVarintTorus(dAtA, i, uint64(m.LastRebalanceBlocks))
		i--
		dAtA[i] = 0x10
	}
	if m.LastRebalanceFinish != 0 {
		i = encodeVarintTorus(dAtA, i, uint64(m.LastRebalanceFinish))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Ring) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ring) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ring) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Attrs) > 0 {
		for k := range m.Attrs {
			v := m.Attrs[k]
			baseI := i
			if len(v) > 0 {
				i -= len(v)
				copy(dAtA[i:], v)
				i = encodeVarintTorus(dAtA, i, uint64(len(v)))
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintTorus(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTorus(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Peers) > 0 {
		for iNdEx := len(m.Peers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Peers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTorus(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.ReplicationFactor != 0 {
		i = encodeVarintTorus(dAtA, i, uint64(m.ReplicationFactor))
		i--
		dAtA[i] = 0x18
	}
	if m.Version != 0 {
		i = encodeVarintTorus(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintTorus(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BlockRef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockRef) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockRef) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Block != 0 {
		i = encodeVarintTorus(dAtA, i, uint64(m.Block))
		i--
		dAtA[i] = 0x18
	}
	if m.INode != 0 {
		i = encodeVarintTorus(dAtA, i, uint64(m.INode))
		i--
		dAtA[i] = 0x10
	}
	if m.Volume != 0 {
		i = encodeVarintTorus(dAtA, i, uint64(m.Volume))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *INodeRef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *INodeRef) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *INodeRef) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.INode != 0 {
		i = encodeVarintTorus(dAtA, i, uint64(m.INode))
		i--
		dAtA[i] = 0x10
	}
	if m.Volume != 0 {
		i = encodeVarintTorus(dAtA, i, uint64(m.Volume))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTorus(dAtA []byte, offset int, v uint64) int {
	offset -= sovTorus(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedINode(r randyTorus, easy bool) *INode {
	this := &INode{}
	this.Volume = uint64(uint64(r.Uint32()))
	this.INode = uint64(uint64(r.Uint32()))
	this.Filesize = uint64(uint64(r.Uint32()))
	if r.Intn(5) != 0 {
		v1 := r.Intn(10)
		this.Attrs = make(map[string]string)
		for i := 0; i < v1; i++ {
			this.Attrs[randStringTorus(r)] = randStringTorus(r)
		}
	}
	if r.Intn(5) != 0 {
		v2 := r.Intn(5)
		this.Blocks = make([]*BlockLayer, v2)
		for i := 0; i < v2; i++ {
			this.Blocks[i] = NewPopulatedBlockLayer(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBlockLayer(r randyTorus, easy bool) *BlockLayer {
	this := &BlockLayer{}
	this.Type = uint32(r.Uint32())
	v3 := r.Intn(100)
	this.Content = make([]byte, v3)
	for i := 0; i < v3; i++ {
		this.Content[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedVolume(r randyTorus, easy bool) *Volume {
	this := &Volume{}
	this.Name = string(randStringTorus(r))
	this.Id = uint64(uint64(r.Uint32()))
	this.Type = string(randStringTorus(r))
	this.MaxBytes = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPeerInfo(r randyTorus, easy bool) *PeerInfo {
	this := &PeerInfo{}
	this.UUID = string(randStringTorus(r))
	this.Address = string(randStringTorus(r))
	this.LastSeen = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.LastSeen *= -1
	}
	this.TotalBlocks = uint64(uint64(r.Uint32()))
	this.UsedBlocks = uint64(uint64(r.Uint32()))
	this.TimedOut = bool(bool(r.Intn(2) == 0))
	if r.Intn(5) != 0 {
		this.RebalanceInfo = NewPopulatedRebalanceInfo(r, easy)
	}
	this.ProtocolVersion = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRebalanceInfo(r randyTorus, easy bool) *RebalanceInfo {
	this := &RebalanceInfo{}
	this.LastRebalanceFinish = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.LastRebalanceFinish *= -1
	}
	this.LastRebalanceBlocks = uint64(uint64(r.Uint32()))
	this.Rebalancing = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRing(r randyTorus, easy bool) *Ring {
	this := &Ring{}
	this.Type = uint32(r.Uint32())
	this.Version = uint32(r.Uint32())
	this.ReplicationFactor = uint32(r.Uint32())
	if r.Intn(5) != 0 {
		v4 := r.Intn(5)
		this.Peers = make([]*PeerInfo, v4)
		for i := 0; i < v4; i++ {
			this.Peers[i] = NewPopulatedPeerInfo(r, easy)
		}
	}
	if r.Intn(5) != 0 {
		v5 := r.Intn(10)
		this.Attrs = make(map[string][]byte)
		for i := 0; i < v5; i++ {
			v6 := r.Intn(100)
			v7 := randStringTorus(r)
			this.Attrs[v7] = make([]byte, v6)
			for i := 0; i < v6; i++ {
				this.Attrs[v7][i] = byte(r.Intn(256))
			}
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBlockRef(r randyTorus, easy bool) *BlockRef {
	this := &BlockRef{}
	this.Volume = uint64(uint64(r.Uint32()))
	this.INode = uint64(uint64(r.Uint32()))
	this.Block = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedINodeRef(r randyTorus, easy bool) *INodeRef {
	this := &INodeRef{}
	this.Volume = uint64(uint64(r.Uint32()))
	this.INode = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyTorus interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneTorus(r randyTorus) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringTorus(r randyTorus) string {
	v8 := r.Intn(100)
	tmps := make([]rune, v8)
	for i := 0; i < v8; i++ {
		tmps[i] = randUTF8RuneTorus(r)
	}
	return string(tmps)
}
func randUnrecognizedTorus(r randyTorus, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldTorus(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldTorus(dAtA []byte, r randyTorus, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateTorus(dAtA, uint64(key))
		v9 := r.Int63()
		if r.Intn(2) == 0 {
			v9 *= -1
		}
		dAtA = encodeVarintPopulateTorus(dAtA, uint64(v9))
	case 1:
		dAtA = encodeVarintPopulateTorus(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateTorus(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateTorus(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateTorus(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateTorus(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *INode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Volume != 0 {
		n += 1 + sovTorus(uint64(m.Volume))
	}
	if m.INode != 0 {
		n += 1 + sovTorus(uint64(m.INode))
	}
	if m.Filesize != 0 {
		n += 1 + sovTorus(uint64(m.Filesize))
	}
	if len(m.Attrs) > 0 {
		for k, v := range m.Attrs {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTorus(uint64(len(k))) + 1 + len(v) + sovTorus(uint64(len(v)))
			n += mapEntrySize + 1 + sovTorus(uint64(mapEntrySize))
		}
	}
	if len(m.Blocks) > 0 {
		for _, e := range m.Blocks {
			l = e.Size()
			n += 1 + l + sovTorus(uint64(l))
		}
	}
	return n
}

func (m *BlockLayer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovTorus(uint64(m.Type))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovTorus(uint64(l))
	}
	return n
}

func (m *Volume) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTorus(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTorus(uint64(m.Id))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovTorus(uint64(l))
	}
	if m.MaxBytes != 0 {
		n += 1 + sovTorus(uint64(m.MaxBytes))
	}
	return n
}

func (m *PeerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovTorus(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTorus(uint64(l))
	}
	if m.LastSeen != 0 {
		n += 1 + sovTorus(uint64(m.LastSeen))
	}
	if m.TotalBlocks != 0 {
		n += 1 + sovTorus(uint64(m.TotalBlocks))
	}
	if m.UsedBlocks != 0 {
		n += 1 + sovTorus(uint64(m.UsedBlocks))
	}
	if m.TimedOut {
		n += 2
	}
	if m.RebalanceInfo != nil {
		l = m.RebalanceInfo.Size()
		n += 1 + l + sovTorus(uint64(l))
	}
	if m.ProtocolVersion != 0 {
		n += 1 + sovTorus(uint64(m.ProtocolVersion))
	}
	return n
}

func (m *RebalanceInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LastRebalanceFinish != 0 {
		n += 1 + sovTorus(uint64(m.LastRebalanceFinish))
	}
	if m.LastRebalanceBlocks != 0 {
		n += 1 + sovTorus(uint64(m.LastRebalanceBlocks))
	}
	if m.Rebalancing {
		n += 2
	}
	return n
}

func (m *Ring) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovTorus(uint64(m.Type))
	}
	if m.Version != 0 {
		n += 1 + sovTorus(uint64(m.Version))
	}
	if m.ReplicationFactor != 0 {
		n += 1 + sovTorus(uint64(m.ReplicationFactor))
	}
	if len(m.Peers) > 0 {
		for _, e := range m.Peers {
			l = e.Size()
			n += 1 + l + sovTorus(uint64(l))
		}
	}
	if len(m.Attrs) > 0 {
		for k, v := range m.Attrs {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovTorus(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovTorus(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTorus(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *BlockRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Volume != 0 {
		n += 1 + sovTorus(uint64(m.Volume))
	}
	if m.INode != 0 {
		n += 1 + sovTorus(uint64(m.INode))
	}
	if m.Block != 0 {
		n += 1 + sovTorus(uint64(m.Block))
	}
	return n
}

func (m *INodeRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Volume != 0 {
		n += 1 + sovTorus(uint64(m.Volume))
	}
	if m.INode != 0 {
		n += 1 + sovTorus(uint64(m.INode))
	}
	return n
}

func sovTorus(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTorus(x uint64) (n int) {
	return sovTorus(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *INode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTorus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: INode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: INode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volume", wireType)
			}
			m.Volume = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTorus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Volume |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field INode", wireType)
			}
			m.INode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTorus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.INode |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filesize", wireType)
			}
			m.Filesize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTorus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Filesize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attrs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTorus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTorus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTorus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attrs == nil {
				m.Attrs = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTorus
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTorus
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTorus
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTorus
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTorus
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTorus
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTorus
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTorus(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTorus
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Attrs[mapkey] = mapvalue
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTorus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTorus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTorus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blocks = append(m.Blocks, &BlockLayer{})
			if err := m.Blocks[len(m.Blocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTorus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTorus
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTorus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockLayer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTorus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockLayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockLayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTorus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTorus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTorus
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTorus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content[:0], dAtA[iNdEx:postIndex]...)
			if m.Content == nil {
				m.Content = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTorus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTorus
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTorus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Volume) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTorus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Volume: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Volume: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTorus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTorus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTorus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTorus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTorus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTorus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTorus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxBytes", wireType)
			}
			m.MaxBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTorus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxBytes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTorus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTorus
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTorus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTorus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTorus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTorus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTorus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTorus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTorus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTorus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSeen", wireType)
			}
			m.LastSeen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTorus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastSeen |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBlocks", wireType)
			}
			m.TotalBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTorus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalBlocks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedBlocks", wireType)
			}
			m.UsedBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTorus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsedBlocks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimedOut", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTorus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TimedOut = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RebalanceInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTorus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTorus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTorus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RebalanceInfo == nil {
				m.RebalanceInfo = &RebalanceInfo{}
			}
			if err := m.RebalanceInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolVersion", wireType)
			}
			m.ProtocolVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTorus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProtocolVersion |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTorus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTorus
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTorus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RebalanceInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTorus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RebalanceInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RebalanceInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastRebalanceFinish", wireType)
			}
			m.LastRebalanceFinish = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTorus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastRebalanceFinish |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastRebalanceBlocks", wireType)
			}
			m.LastRebalanceBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTorus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastRebalanceBlocks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rebalancing", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTorus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Rebalancing = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTorus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTorus
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTorus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ring) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTorus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ring: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ring: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTorus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTorus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicationFactor", wireType)
			}
			m.ReplicationFactor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTorus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplicationFactor |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTorus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTorus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTorus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peers = append(m.Peers, &PeerInfo{})
			if err := m.Peers[len(m.Peers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attrs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTorus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTorus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTorus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attrs == nil {
				m.Attrs = make(map[string][]byte)
			}
			var mapkey string
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTorus
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTorus
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTorus
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTorus
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTorus
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthTorus
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthTorus
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTorus(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTorus
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Attrs[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTorus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTorus
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTorus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockRef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTorus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockRef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockRef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volume", wireType)
			}
			m.Volume = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTorus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Volume |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field INode", wireType)
			}
			m.INode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTorus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.INode |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			m.Block = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTorus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Block |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTorus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTorus
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTorus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *INodeRef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTorus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: INodeRef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: INodeRef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volume", wireType)
			}
			m.Volume = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTorus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Volume |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field INode", wireType)
			}
			m.INode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTorus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.INode |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTorus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTorus
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTorus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTorus(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTorus
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTorus
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTorus
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTorus
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTorus
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTorus
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTorus        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTorus          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTorus = fmt.Errorf("proto: unexpected end of group")
)
