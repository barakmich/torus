// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fsmodel.proto

package models

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Metadata struct {
	Uid   uint32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Gid   uint32 `protobuf:"varint,2,opt,name=gid,proto3" json:"gid,omitempty"`
	Mode  uint32 `protobuf:"varint,3,opt,name=mode,proto3" json:"mode,omitempty"`
	Flags uint32 `protobuf:"varint,4,opt,name=flags,proto3" json:"flags,omitempty"`
	Ctime uint64 `protobuf:"varint,5,opt,name=ctime,proto3" json:"ctime,omitempty"`
	Mtime uint64 `protobuf:"varint,6,opt,name=mtime,proto3" json:"mtime,omitempty"`
}

func (m *Metadata) Reset()         { *m = Metadata{} }
func (m *Metadata) String() string { return proto.CompactTextString(m) }
func (*Metadata) ProtoMessage()    {}
func (*Metadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_26a4b2d26cd841cc, []int{0}
}
func (m *Metadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Metadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Metadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Metadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metadata.Merge(m, src)
}
func (m *Metadata) XXX_Size() int {
	return m.Size()
}
func (m *Metadata) XXX_DiscardUnknown() {
	xxx_messageInfo_Metadata.DiscardUnknown(m)
}

var xxx_messageInfo_Metadata proto.InternalMessageInfo

func (m *Metadata) GetUid() uint32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *Metadata) GetGid() uint32 {
	if m != nil {
		return m.Gid
	}
	return 0
}

func (m *Metadata) GetMode() uint32 {
	if m != nil {
		return m.Mode
	}
	return 0
}

func (m *Metadata) GetFlags() uint32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *Metadata) GetCtime() uint64 {
	if m != nil {
		return m.Ctime
	}
	return 0
}

func (m *Metadata) GetMtime() uint64 {
	if m != nil {
		return m.Mtime
	}
	return 0
}

type FileINode struct {
	Inode       *INode    `protobuf:"bytes,1,opt,name=inode,proto3" json:"inode,omitempty"`
	Chain       uint64    `protobuf:"varint,2,opt,name=chain,proto3" json:"chain,omitempty"`
	Filenames   []string  `protobuf:"bytes,3,rep,name=filenames,proto3" json:"filenames,omitempty"`
	Permissions *Metadata `protobuf:"bytes,4,opt,name=permissions,proto3" json:"permissions,omitempty"`
}

func (m *FileINode) Reset()         { *m = FileINode{} }
func (m *FileINode) String() string { return proto.CompactTextString(m) }
func (*FileINode) ProtoMessage()    {}
func (*FileINode) Descriptor() ([]byte, []int) {
	return fileDescriptor_26a4b2d26cd841cc, []int{1}
}
func (m *FileINode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileINode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FileINode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FileINode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileINode.Merge(m, src)
}
func (m *FileINode) XXX_Size() int {
	return m.Size()
}
func (m *FileINode) XXX_DiscardUnknown() {
	xxx_messageInfo_FileINode.DiscardUnknown(m)
}

var xxx_messageInfo_FileINode proto.InternalMessageInfo

func (m *FileINode) GetInode() *INode {
	if m != nil {
		return m.Inode
	}
	return nil
}

func (m *FileINode) GetChain() uint64 {
	if m != nil {
		return m.Chain
	}
	return 0
}

func (m *FileINode) GetFilenames() []string {
	if m != nil {
		return m.Filenames
	}
	return nil
}

func (m *FileINode) GetPermissions() *Metadata {
	if m != nil {
		return m.Permissions
	}
	return nil
}

type Directory struct {
	Metadata *Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// key is the filename without the path
	Files map[string]*FileEntry `protobuf:"bytes,2,rep,name=files,proto3" json:"files,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Directory) Reset()         { *m = Directory{} }
func (m *Directory) String() string { return proto.CompactTextString(m) }
func (*Directory) ProtoMessage()    {}
func (*Directory) Descriptor() ([]byte, []int) {
	return fileDescriptor_26a4b2d26cd841cc, []int{2}
}
func (m *Directory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Directory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Directory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Directory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Directory.Merge(m, src)
}
func (m *Directory) XXX_Size() int {
	return m.Size()
}
func (m *Directory) XXX_DiscardUnknown() {
	xxx_messageInfo_Directory.DiscardUnknown(m)
}

var xxx_messageInfo_Directory proto.InternalMessageInfo

func (m *Directory) GetMetadata() *Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Directory) GetFiles() map[string]*FileEntry {
	if m != nil {
		return m.Files
	}
	return nil
}

type FileEntry struct {
	Chain   uint64 `protobuf:"varint,1,opt,name=chain,proto3" json:"chain,omitempty"`
	Sympath string `protobuf:"bytes,2,opt,name=sympath,proto3" json:"sympath,omitempty"`
}

func (m *FileEntry) Reset()         { *m = FileEntry{} }
func (m *FileEntry) String() string { return proto.CompactTextString(m) }
func (*FileEntry) ProtoMessage()    {}
func (*FileEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_26a4b2d26cd841cc, []int{3}
}
func (m *FileEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FileEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FileEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileEntry.Merge(m, src)
}
func (m *FileEntry) XXX_Size() int {
	return m.Size()
}
func (m *FileEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_FileEntry.DiscardUnknown(m)
}

var xxx_messageInfo_FileEntry proto.InternalMessageInfo

func (m *FileEntry) GetChain() uint64 {
	if m != nil {
		return m.Chain
	}
	return 0
}

func (m *FileEntry) GetSympath() string {
	if m != nil {
		return m.Sympath
	}
	return ""
}

type FileChainSet struct {
	Chains map[uint64]uint64 `protobuf:"bytes,1,rep,name=chains,proto3" json:"chains,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *FileChainSet) Reset()         { *m = FileChainSet{} }
func (m *FileChainSet) String() string { return proto.CompactTextString(m) }
func (*FileChainSet) ProtoMessage()    {}
func (*FileChainSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_26a4b2d26cd841cc, []int{4}
}
func (m *FileChainSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileChainSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FileChainSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FileChainSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileChainSet.Merge(m, src)
}
func (m *FileChainSet) XXX_Size() int {
	return m.Size()
}
func (m *FileChainSet) XXX_DiscardUnknown() {
	xxx_messageInfo_FileChainSet.DiscardUnknown(m)
}

var xxx_messageInfo_FileChainSet proto.InternalMessageInfo

func (m *FileChainSet) GetChains() map[uint64]uint64 {
	if m != nil {
		return m.Chains
	}
	return nil
}

func init() {
	proto.RegisterType((*Metadata)(nil), "models.Metadata")
	proto.RegisterType((*FileINode)(nil), "models.FileINode")
	proto.RegisterType((*Directory)(nil), "models.Directory")
	proto.RegisterMapType((map[string]*FileEntry)(nil), "models.Directory.FilesEntry")
	proto.RegisterType((*FileEntry)(nil), "models.FileEntry")
	proto.RegisterType((*FileChainSet)(nil), "models.FileChainSet")
	proto.RegisterMapType((map[uint64]uint64)(nil), "models.FileChainSet.ChainsEntry")
}

func init() { proto.RegisterFile("fsmodel.proto", fileDescriptor_26a4b2d26cd841cc) }

var fileDescriptor_26a4b2d26cd841cc = []byte{
	// 478 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x52, 0xbd, 0x8e, 0xd3, 0x4c,
	0x14, 0xcd, 0xc4, 0x76, 0xbe, 0xf5, 0xf5, 0x17, 0x69, 0x19, 0x6d, 0x61, 0x45, 0xab, 0x91, 0x65,
	0x0a, 0x52, 0x2c, 0x5e, 0xc9, 0x34, 0x0b, 0x74, 0xfc, 0x49, 0x08, 0x41, 0x61, 0x9e, 0xc0, 0x89,
	0x27, 0xce, 0x08, 0xff, 0x44, 0x9e, 0x31, 0x52, 0x6a, 0x78, 0x00, 0x4a, 0x1e, 0x81, 0x47, 0x40,
	0x54, 0x94, 0x94, 0x5b, 0x52, 0xee, 0x3a, 0x2f, 0x41, 0x89, 0xe6, 0x8e, 0x9d, 0xb5, 0x44, 0x77,
	0xcf, 0x99, 0x73, 0xcf, 0xbd, 0xe7, 0xda, 0x30, 0xdf, 0xc8, 0xb2, 0xce, 0x78, 0x11, 0xed, 0x9a,
	0x5a, 0xd5, 0x74, 0x86, 0x40, 0x2e, 0x1e, 0xe6, 0x42, 0x6d, 0xdb, 0x55, 0xb4, 0xae, 0xcb, 0xcb,
	0xbc, 0xce, 0xeb, 0x4b, 0x7c, 0x5e, 0xb5, 0x1b, 0x44, 0x08, 0xb0, 0x32, 0x6d, 0x0b, 0x4f, 0xd5,
	0x4d, 0x2b, 0x0d, 0x08, 0x3f, 0x13, 0x38, 0x79, 0xcb, 0x55, 0x9a, 0xa5, 0x2a, 0xa5, 0xa7, 0x60,
	0xb5, 0x22, 0xf3, 0x49, 0x40, 0x96, 0xf3, 0x44, 0x97, 0x9a, 0xc9, 0x45, 0xe6, 0x4f, 0x0d, 0x93,
	0x8b, 0x8c, 0x52, 0xb0, 0xf5, 0x58, 0xdf, 0x42, 0x0a, 0x6b, 0x7a, 0x06, 0xce, 0xa6, 0x48, 0x73,
	0xe9, 0xdb, 0x48, 0x1a, 0xa0, 0xd9, 0xb5, 0x12, 0x25, 0xf7, 0x9d, 0x80, 0x2c, 0xed, 0xc4, 0x00,
	0xcd, 0x96, 0xc8, 0xce, 0x0c, 0x8b, 0x20, 0xfc, 0x4a, 0xc0, 0x7d, 0x25, 0x0a, 0xfe, 0xfa, 0x9d,
	0xf6, 0xbb, 0x0f, 0x8e, 0xa8, 0xf4, 0x10, 0xbd, 0x89, 0x17, 0xcf, 0x23, 0x13, 0x34, 0xc2, 0xd7,
	0xc4, 0xbc, 0xa1, 0xfd, 0x36, 0x15, 0x15, 0x2e, 0xa7, 0xed, 0x35, 0xa0, 0xe7, 0xe0, 0x6e, 0x44,
	0xc1, 0xab, 0xb4, 0xe4, 0xd2, 0xb7, 0x02, 0x6b, 0xe9, 0x26, 0x77, 0x04, 0x8d, 0xc1, 0xdb, 0xf1,
	0xa6, 0x14, 0x52, 0x8a, 0xba, 0x32, 0xeb, 0x7a, 0xf1, 0xe9, 0x60, 0x3f, 0xdc, 0x21, 0x19, 0x8b,
	0xc2, 0x1f, 0x04, 0xdc, 0x17, 0xa2, 0xe1, 0x6b, 0x55, 0x37, 0x7b, 0x7a, 0x01, 0x27, 0x65, 0x2f,
	0xeb, 0xb7, 0xfb, 0xb7, 0xfd, 0xa8, 0xa0, 0x31, 0x38, 0x7a, 0xb8, 0xf4, 0xa7, 0x81, 0xb5, 0xf4,
	0xe2, 0xf3, 0x41, 0x7a, 0xf4, 0x8b, 0x74, 0x68, 0xf9, 0xb2, 0x52, 0xcd, 0x3e, 0x31, 0xd2, 0xc5,
	0x1b, 0x80, 0x3b, 0x52, 0x7f, 0x80, 0x0f, 0x7c, 0x8f, 0xa3, 0xdc, 0x44, 0x97, 0xf4, 0x01, 0x38,
	0x1f, 0xd3, 0xa2, 0xe5, 0x98, 0xdb, 0x8b, 0xef, 0x0d, 0x9e, 0xba, 0xa9, 0x37, 0xc2, 0xf7, 0x27,
	0xd3, 0x2b, 0x12, 0x3e, 0x35, 0x67, 0x35, 0x5e, 0xc7, 0x8b, 0x91, 0xf1, 0xc5, 0x7c, 0xf8, 0x4f,
	0xee, 0xcb, 0x5d, 0xaa, 0xb6, 0xe8, 0xe8, 0x26, 0x03, 0x0c, 0x3f, 0x11, 0xf8, 0x5f, 0x77, 0x3f,
	0xd7, 0xba, 0xf7, 0x5c, 0xd1, 0x2b, 0x98, 0x61, 0x8f, 0xf4, 0x09, 0xe6, 0x09, 0xc6, 0xb3, 0x07,
	0x55, 0x84, 0x45, 0x9f, 0xa9, 0xd7, 0x2f, 0x1e, 0x83, 0x37, 0xa2, 0xc7, 0xa9, 0x6c, 0x93, 0xea,
	0x6c, 0x9c, 0xca, 0x1e, 0x45, 0x78, 0x76, 0x71, 0x73, 0xcb, 0xc8, 0x9f, 0x5b, 0x46, 0xbe, 0x75,
	0x8c, 0x7c, 0xef, 0x18, 0xf9, 0xd9, 0x31, 0xf2, 0xab, 0x63, 0xe4, 0xba, 0x63, 0xe4, 0xa6, 0x63,
	0xe4, 0xcb, 0x81, 0x4d, 0xae, 0x0f, 0x6c, 0xf2, 0xfb, 0xc0, 0x26, 0xab, 0x19, 0xfe, 0xd6, 0x8f,
	0xfe, 0x06, 0x00, 0x00, 0xff, 0xff, 0x02, 0x26, 0x4b, 0xfe, 0x2b, 0x03, 0x00, 0x00,
}

func (this *Metadata) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Metadata)
	if !ok {
		that2, ok := that.(Metadata)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Metadata")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Metadata but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Metadata but is not nil && this == nil")
	}
	if this.Uid != that1.Uid {
		return fmt.Errorf("Uid this(%v) Not Equal that(%v)", this.Uid, that1.Uid)
	}
	if this.Gid != that1.Gid {
		return fmt.Errorf("Gid this(%v) Not Equal that(%v)", this.Gid, that1.Gid)
	}
	if this.Mode != that1.Mode {
		return fmt.Errorf("Mode this(%v) Not Equal that(%v)", this.Mode, that1.Mode)
	}
	if this.Flags != that1.Flags {
		return fmt.Errorf("Flags this(%v) Not Equal that(%v)", this.Flags, that1.Flags)
	}
	if this.Ctime != that1.Ctime {
		return fmt.Errorf("Ctime this(%v) Not Equal that(%v)", this.Ctime, that1.Ctime)
	}
	if this.Mtime != that1.Mtime {
		return fmt.Errorf("Mtime this(%v) Not Equal that(%v)", this.Mtime, that1.Mtime)
	}
	return nil
}
func (this *Metadata) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Metadata)
	if !ok {
		that2, ok := that.(Metadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if this.Gid != that1.Gid {
		return false
	}
	if this.Mode != that1.Mode {
		return false
	}
	if this.Flags != that1.Flags {
		return false
	}
	if this.Ctime != that1.Ctime {
		return false
	}
	if this.Mtime != that1.Mtime {
		return false
	}
	return true
}
func (this *FileINode) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*FileINode)
	if !ok {
		that2, ok := that.(FileINode)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *FileINode")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *FileINode but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *FileINode but is not nil && this == nil")
	}
	if !this.Inode.Equal(that1.Inode) {
		return fmt.Errorf("Inode this(%v) Not Equal that(%v)", this.Inode, that1.Inode)
	}
	if this.Chain != that1.Chain {
		return fmt.Errorf("Chain this(%v) Not Equal that(%v)", this.Chain, that1.Chain)
	}
	if len(this.Filenames) != len(that1.Filenames) {
		return fmt.Errorf("Filenames this(%v) Not Equal that(%v)", len(this.Filenames), len(that1.Filenames))
	}
	for i := range this.Filenames {
		if this.Filenames[i] != that1.Filenames[i] {
			return fmt.Errorf("Filenames this[%v](%v) Not Equal that[%v](%v)", i, this.Filenames[i], i, that1.Filenames[i])
		}
	}
	if !this.Permissions.Equal(that1.Permissions) {
		return fmt.Errorf("Permissions this(%v) Not Equal that(%v)", this.Permissions, that1.Permissions)
	}
	return nil
}
func (this *FileINode) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FileINode)
	if !ok {
		that2, ok := that.(FileINode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Inode.Equal(that1.Inode) {
		return false
	}
	if this.Chain != that1.Chain {
		return false
	}
	if len(this.Filenames) != len(that1.Filenames) {
		return false
	}
	for i := range this.Filenames {
		if this.Filenames[i] != that1.Filenames[i] {
			return false
		}
	}
	if !this.Permissions.Equal(that1.Permissions) {
		return false
	}
	return true
}
func (this *Directory) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Directory)
	if !ok {
		that2, ok := that.(Directory)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Directory")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Directory but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Directory but is not nil && this == nil")
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return fmt.Errorf("Metadata this(%v) Not Equal that(%v)", this.Metadata, that1.Metadata)
	}
	if len(this.Files) != len(that1.Files) {
		return fmt.Errorf("Files this(%v) Not Equal that(%v)", len(this.Files), len(that1.Files))
	}
	for i := range this.Files {
		if !this.Files[i].Equal(that1.Files[i]) {
			return fmt.Errorf("Files this[%v](%v) Not Equal that[%v](%v)", i, this.Files[i], i, that1.Files[i])
		}
	}
	return nil
}
func (this *Directory) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Directory)
	if !ok {
		that2, ok := that.(Directory)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if len(this.Files) != len(that1.Files) {
		return false
	}
	for i := range this.Files {
		if !this.Files[i].Equal(that1.Files[i]) {
			return false
		}
	}
	return true
}
func (this *FileEntry) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*FileEntry)
	if !ok {
		that2, ok := that.(FileEntry)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *FileEntry")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *FileEntry but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *FileEntry but is not nil && this == nil")
	}
	if this.Chain != that1.Chain {
		return fmt.Errorf("Chain this(%v) Not Equal that(%v)", this.Chain, that1.Chain)
	}
	if this.Sympath != that1.Sympath {
		return fmt.Errorf("Sympath this(%v) Not Equal that(%v)", this.Sympath, that1.Sympath)
	}
	return nil
}
func (this *FileEntry) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FileEntry)
	if !ok {
		that2, ok := that.(FileEntry)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Chain != that1.Chain {
		return false
	}
	if this.Sympath != that1.Sympath {
		return false
	}
	return true
}
func (this *FileChainSet) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*FileChainSet)
	if !ok {
		that2, ok := that.(FileChainSet)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *FileChainSet")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *FileChainSet but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *FileChainSet but is not nil && this == nil")
	}
	if len(this.Chains) != len(that1.Chains) {
		return fmt.Errorf("Chains this(%v) Not Equal that(%v)", len(this.Chains), len(that1.Chains))
	}
	for i := range this.Chains {
		if this.Chains[i] != that1.Chains[i] {
			return fmt.Errorf("Chains this[%v](%v) Not Equal that[%v](%v)", i, this.Chains[i], i, that1.Chains[i])
		}
	}
	return nil
}
func (this *FileChainSet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FileChainSet)
	if !ok {
		that2, ok := that.(FileChainSet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Chains) != len(that1.Chains) {
		return false
	}
	for i := range this.Chains {
		if this.Chains[i] != that1.Chains[i] {
			return false
		}
	}
	return true
}
func (m *Metadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Metadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Metadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Mtime != 0 {
		i = encodeVarintFsmodel(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x30
	}
	if m.Ctime != 0 {
		i = encodeVarintFsmodel(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x28
	}
	if m.Flags != 0 {
		i = encodeVarintFsmodel(dAtA, i, uint64(m.Flags))
		i--
		dAtA[i] = 0x20
	}
	if m.Mode != 0 {
		i = encodeVarintFsmodel(dAtA, i, uint64(m.Mode))
		i--
		dAtA[i] = 0x18
	}
	if m.Gid != 0 {
		i = encodeVarintFsmodel(dAtA, i, uint64(m.Gid))
		i--
		dAtA[i] = 0x10
	}
	if m.Uid != 0 {
		i = encodeVarintFsmodel(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FileINode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileINode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FileINode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Permissions != nil {
		{
			size, err := m.Permissions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFsmodel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Filenames) > 0 {
		for iNdEx := len(m.Filenames) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Filenames[iNdEx])
			copy(dAtA[i:], m.Filenames[iNdEx])
			i = encodeVarintFsmodel(dAtA, i, uint64(len(m.Filenames[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Chain != 0 {
		i = encodeVarintFsmodel(dAtA, i, uint64(m.Chain))
		i--
		dAtA[i] = 0x10
	}
	if m.Inode != nil {
		{
			size, err := m.Inode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFsmodel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Directory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Directory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Directory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Files) > 0 {
		for k := range m.Files {
			v := m.Files[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintFsmodel(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintFsmodel(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintFsmodel(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFsmodel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FileEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FileEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sympath) > 0 {
		i -= len(m.Sympath)
		copy(dAtA[i:], m.Sympath)
		i = encodeVarintFsmodel(dAtA, i, uint64(len(m.Sympath)))
		i--
		dAtA[i] = 0x12
	}
	if m.Chain != 0 {
		i = encodeVarintFsmodel(dAtA, i, uint64(m.Chain))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FileChainSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileChainSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FileChainSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Chains) > 0 {
		for k := range m.Chains {
			v := m.Chains[k]
			baseI := i
			i = encodeVarintFsmodel(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintFsmodel(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintFsmodel(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintFsmodel(dAtA []byte, offset int, v uint64) int {
	offset -= sovFsmodel(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedMetadata(r randyFsmodel, easy bool) *Metadata {
	this := &Metadata{}
	this.Uid = uint32(r.Uint32())
	this.Gid = uint32(r.Uint32())
	this.Mode = uint32(r.Uint32())
	this.Flags = uint32(r.Uint32())
	this.Ctime = uint64(uint64(r.Uint32()))
	this.Mtime = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedFileINode(r randyFsmodel, easy bool) *FileINode {
	this := &FileINode{}
	if r.Intn(5) != 0 {
		this.Inode = NewPopulatedINode(r, easy)
	}
	this.Chain = uint64(uint64(r.Uint32()))
	v1 := r.Intn(10)
	this.Filenames = make([]string, v1)
	for i := 0; i < v1; i++ {
		this.Filenames[i] = string(randStringFsmodel(r))
	}
	if r.Intn(5) != 0 {
		this.Permissions = NewPopulatedMetadata(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDirectory(r randyFsmodel, easy bool) *Directory {
	this := &Directory{}
	if r.Intn(5) != 0 {
		this.Metadata = NewPopulatedMetadata(r, easy)
	}
	if r.Intn(5) != 0 {
		v2 := r.Intn(10)
		this.Files = make(map[string]*FileEntry)
		for i := 0; i < v2; i++ {
			this.Files[randStringFsmodel(r)] = NewPopulatedFileEntry(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedFileEntry(r randyFsmodel, easy bool) *FileEntry {
	this := &FileEntry{}
	this.Chain = uint64(uint64(r.Uint32()))
	this.Sympath = string(randStringFsmodel(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedFileChainSet(r randyFsmodel, easy bool) *FileChainSet {
	this := &FileChainSet{}
	if r.Intn(5) != 0 {
		v3 := r.Intn(10)
		this.Chains = make(map[uint64]uint64)
		for i := 0; i < v3; i++ {
			v4 := uint64(uint64(r.Uint32()))
			this.Chains[v4] = uint64(uint64(r.Uint32()))
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyFsmodel interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneFsmodel(r randyFsmodel) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringFsmodel(r randyFsmodel) string {
	v5 := r.Intn(100)
	tmps := make([]rune, v5)
	for i := 0; i < v5; i++ {
		tmps[i] = randUTF8RuneFsmodel(r)
	}
	return string(tmps)
}
func randUnrecognizedFsmodel(r randyFsmodel, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldFsmodel(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldFsmodel(dAtA []byte, r randyFsmodel, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateFsmodel(dAtA, uint64(key))
		v6 := r.Int63()
		if r.Intn(2) == 0 {
			v6 *= -1
		}
		dAtA = encodeVarintPopulateFsmodel(dAtA, uint64(v6))
	case 1:
		dAtA = encodeVarintPopulateFsmodel(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateFsmodel(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateFsmodel(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateFsmodel(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateFsmodel(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Metadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovFsmodel(uint64(m.Uid))
	}
	if m.Gid != 0 {
		n += 1 + sovFsmodel(uint64(m.Gid))
	}
	if m.Mode != 0 {
		n += 1 + sovFsmodel(uint64(m.Mode))
	}
	if m.Flags != 0 {
		n += 1 + sovFsmodel(uint64(m.Flags))
	}
	if m.Ctime != 0 {
		n += 1 + sovFsmodel(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovFsmodel(uint64(m.Mtime))
	}
	return n
}

func (m *FileINode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Inode != nil {
		l = m.Inode.Size()
		n += 1 + l + sovFsmodel(uint64(l))
	}
	if m.Chain != 0 {
		n += 1 + sovFsmodel(uint64(m.Chain))
	}
	if len(m.Filenames) > 0 {
		for _, s := range m.Filenames {
			l = len(s)
			n += 1 + l + sovFsmodel(uint64(l))
		}
	}
	if m.Permissions != nil {
		l = m.Permissions.Size()
		n += 1 + l + sovFsmodel(uint64(l))
	}
	return n
}

func (m *Directory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovFsmodel(uint64(l))
	}
	if len(m.Files) > 0 {
		for k, v := range m.Files {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovFsmodel(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovFsmodel(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovFsmodel(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *FileEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Chain != 0 {
		n += 1 + sovFsmodel(uint64(m.Chain))
	}
	l = len(m.Sympath)
	if l > 0 {
		n += 1 + l + sovFsmodel(uint64(l))
	}
	return n
}

func (m *FileChainSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Chains) > 0 {
		for k, v := range m.Chains {
			_ = k
			_ = v
			mapEntrySize := 1 + sovFsmodel(uint64(k)) + 1 + sovFsmodel(uint64(v))
			n += mapEntrySize + 1 + sovFsmodel(uint64(mapEntrySize))
		}
	}
	return n
}

func sovFsmodel(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFsmodel(x uint64) (n int) {
	return sovFsmodel(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Metadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsmodel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Metadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Metadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsmodel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gid", wireType)
			}
			m.Gid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsmodel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsmodel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsmodel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsmodel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsmodel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFsmodel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFsmodel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFsmodel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileINode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsmodel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileINode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileINode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsmodel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFsmodel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFsmodel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Inode == nil {
				m.Inode = &INode{}
			}
			if err := m.Inode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			m.Chain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsmodel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chain |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filenames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsmodel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFsmodel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFsmodel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filenames = append(m.Filenames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permissions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsmodel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFsmodel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFsmodel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Permissions == nil {
				m.Permissions = &Metadata{}
			}
			if err := m.Permissions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFsmodel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFsmodel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFsmodel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Directory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsmodel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Directory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Directory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsmodel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFsmodel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFsmodel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &Metadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Files", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsmodel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFsmodel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFsmodel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Files == nil {
				m.Files = make(map[string]*FileEntry)
			}
			var mapkey string
			var mapvalue *FileEntry
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFsmodel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFsmodel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthFsmodel
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthFsmodel
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFsmodel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthFsmodel
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthFsmodel
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &FileEntry{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFsmodel(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthFsmodel
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Files[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFsmodel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFsmodel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFsmodel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsmodel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			m.Chain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsmodel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chain |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sympath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsmodel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFsmodel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFsmodel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sympath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFsmodel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFsmodel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFsmodel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileChainSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsmodel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileChainSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileChainSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chains", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsmodel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFsmodel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFsmodel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Chains == nil {
				m.Chains = make(map[uint64]uint64)
			}
			var mapkey uint64
			var mapvalue uint64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFsmodel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFsmodel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFsmodel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFsmodel(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthFsmodel
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Chains[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFsmodel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFsmodel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFsmodel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFsmodel(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFsmodel
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFsmodel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFsmodel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFsmodel
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFsmodel
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFsmodel
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFsmodel        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFsmodel          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFsmodel = fmt.Errorf("proto: unexpected end of group")
)
